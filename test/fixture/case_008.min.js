Cube('xxx', [], function(a, b, d, e, f) {
  function c(i, k) {
    function j() {
      e = !1, d.length ? b = d.concat(b) : f = -1, b.length && h()
    }

    function h() {
      if (e) return;
      var c = setTimeout(j);
      e = !0;
      var a = b.length;
      while (a) {
        d = b, b = [];
        while (++f < a) d && d[f].run();
        f = -1, a = b.length
      }
      d = null, e = !1, clearTimeout(c)
    }

    function g(a, b) {
      this.fun = a, this.array = b
    }

    function c() {}
    var a = i.exports = {},
      b = [],
      e = !1,
      d, f = -1;
    a.nextTick = function(d) {
      var c = new Array(arguments.length - 1);
      if (arguments.length > 1)
        for (var a = 1; a < arguments.length; a++) c[a - 1] = arguments[a];
      b.push(new g(d, c)), b.length === 1 && !e && setTimeout(h, 0)
    }, g.prototype.run = function() {
      this.fun.apply(null, this.array)
    }, a.title = 'browser', a.browser = !0, a.env = {}, a.argv = [], a.version = '', a.versions = {}, a.on = c, a.addListener = c, a.once = c, a.off = c, a.removeListener = c, a.removeAllListeners = c, a.emit = c, a.binding = function(a) {
      throw new Error('process.binding is not supported')
    }, a.cwd = function() {
      return '/'
    }, a.chdir = function(a) {
      throw new Error('process.chdir is not supported')
    }, a.umask = function() {
      return 0
    }
  }
  return c(a, b), a.exports
})